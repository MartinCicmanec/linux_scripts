#!/bin/bash
#
# This is a simple kernel hook to populate the systemd-boot entries
# whenever kernels are added or removed.
#
# https://askubuntu.com/questions/1225791/how-to-replace-grub-with-bootloader-systemd-boot-in-ubuntu-20-04

# Install 
# chown root: /etc/kernel/postinst.d/zz-update-systemd-boot
# chmod 0755 /etc/kernel/postinst.d/zz-update-systemd-boot
# cd /etc/kernel/postrm.d/ && ln -s ../postinst.d/zz-update-systemd-boot zz-update-systemd-boot
# [ -d "/etc/initramfs/post-update.d" ] || mkdir -p /etc/initramfs/post-update.d
# cd /etc/initramfs/post-update.d/ && ln -s ../../kernel/postinst.d/zz-update-systemd-boot zz-update-systemd-boot

# Trigger run
# sudo apt install --reinstall  linux-image-$(uname -r)

# The UUID of your disk.
UUID="c0fe84d2-a6cb-45bc-83b7-597c0a8d5f90"

# The LUKS volume slug you want to use, which will result in the
# partition being mounted to /dev/mapper/CHANGEME.
VOLUME="CHANGEME"

# Any rootflags you wish to set.
ROOTFLAGS="quiet loglevel=0 systemd.show_status=false splash"    

# Our kernels.
KERNELS=()
FIND="find /boot -maxdepth 1 -name 'vmlinuz-*' -type f -print0 | sort -rz"

eval "${FIND}" | while IFS= read -r -d $'\0' LINE; do
    KERNEL=$(basename "${LINE}")
    KERNELS+=("${KERNEL:8}")
done

# There has to be at least one kernel.
if [ ${#KERNELS[@]} -lt 1 ]; then
    echo -e "\e[2msystemd-boot\e[0m \e[1;31mNo kernels found.\e[0m"
    exit 1
fi
       
# Perform a nuclear clean to ensure everything is always in perfect
# sync.
rm /boot/efi/loader/entries/ubuntu*.conf
rm -rf /boot/efi/EFI/Ubuntu-${UUID}
mkdir -p /boot/efi/EFI/Ubuntu-${UUID}
      
# Copy the latest kernel files to a consistent place so we can keep
# using the same loader configuration.
LATEST="${KERNELS[@]:0:1}"
echo -e "\e[2msystemd-boot\e[0m \e[1;32m${LATEST}\e[0m"
for FILE in config initrd.img System.map vmlinuz; do
    cp "/boot/${FILE}-${LATEST}" "/boot/efi/EFI/Ubuntu-${UUID}/${FILE}"
    cat << EOF > /boot/efi/loader/entries/ubuntu.conf
title   Ubuntu GNOME
linux   /EFI/Ubuntu-${UUID}/vmlinuz
initrd  /EFI/Ubuntu-${UUID}/initrd.img
options root=UUID=${UUID} ro rootflags=${ROOTFLAGS}
EOF
done
    
# Copy any legacy kernels over too, but maintain their version-based
# names to avoid collisions.
if [ ${#KERNELS[@]} -gt 1 ]; then
    LEGACY=("${KERNELS[@]:1}")
    for VERSION in "${LEGACY[@]}"; do
        echo -e "\e[2msystemd-boot\e[0m \e[1;32m${VERSION}\e[0m"
        for FILE in config initrd.img System.map vmlinuz; do
            cp "/boot/${FILE}-${VERSION}" "/boot/efi/EFI/Ubuntu-${UUID}/${FILE}-${VERSION}"
            cat << EOF > /boot/efi/loader/entries/ubuntu-${VERSION}.conf
title   Ubuntu GNOME ${VERSION}
linux   /EFI/Ubuntu-${UUID}/vmlinuz-${VERSION}
initrd  /EFI/Ubuntu-${UUID}/initrd.img-${VERSION}
options root=UUID=${UUID} ro rootflags=${ROOTFLAGS}
EOF
        done
    done
fi

# Success!
exit 0
